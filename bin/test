#!/usr/bin/env node
var assert = require('assert'),
    fs = require('fs'),
    path = require('path'),
    spawn = require('child_process').spawn,
    sys = require('sys'),
    vm = require('vm');

var top = path.normalize(path.join(__dirname, '..')),
    out = path.join(top, 'out');

var ljust = function(s, n) {
  s = s.substr(0, n);
  while (s.length < n) {
    s += ' ';
  }
  return s;
};

/**
 */
var compile = function(mods, callback) {
  var count = mods.length;
  
  if (!fs.existsSync(out)) {
    fs.mkdirSync(out);
  }

  mods.forEach(function(mod, i) {
    var dest = path.join(out, path.basename(mod, '.ts')) + '.js';
    spawn('tsc', ['--out', dest, path.join(top, mod)], {stdio : 'inherit'})
      .on('close', function(code) {
        if (code != 0) {
          process.exit(code);
        }

        var code = vm.createScript(fs.readFileSync(dest));
        code.runInThisContext();

        count--;
        if (count == 0) {
          callback();
        }
      });
  });
};

var Runner = {
  _toTest: function(data) {
    // flatten an array of arrays.
    var flatten = function(array) {
      return array.reduce(function(c, x) {
        return c.concat(x);
      }, []);
    };

    var lines = data.split('\n').map(function(line) {
      line = line.trim();
      return line.length == 0 ? null : line.split(' ').map(function(v) {
        return parseInt(v);
      });
    });

    var res = [];
    res.push(lines.reduce(function(col, line) {
      if (line == null) {
        res.push(col);
        return [];
      }
      col.push(line);
      return col;
    }, []));

    return {
      init: flatten(res[0]),
      gens: res.slice(1).map(flatten),
      rows: res[0].length,
      cols: res[0][0].length
    };
  },

  _reportStateProblem: function(model, expected) {
    sys.puts('    expected:');
    for (var i = 0; i < expected.length; i += model.cols) {
      sys.puts('    ' + expected.slice(i, i + model.cols).join(' '));
    }

    sys.puts('    got:');
    for (var i = 0, n = model.size(); i < n; i += model.cols) {
      var row = [];
      for (var j = 0; j < model.cols; j++) {
        row.push(model.get(i + j));
      }
      sys.puts('    ' + row.join(' '));
    }
  },

  _reportChangeProblem: function(changes, expected) {
    sys.puts('    expected:');
    sys.puts('    ' + sys.inspect(expected));
    sys.puts('    got:');
    sys.puts('    ' + sys.inspect(changes));
  },

  _expectedChanges: function(next, prev) {
    var born = [],
        died = [];

    for (var i = 0, n = next.length; i < n; i++) {
      if (next[i] == prev[i]) {
        continue;
      }
      if (next[i] == 1) {
        born.push(i);
      } else {
        died.push(i);
      }
    }

    return { born: born, died: died };
  },

  _hasExpectedChanges: function(changes, expected) {
    var rb = changes.born,
        rd = changes.died,
        eb = expected.born,
        ed = expected.died;
    if (rb.length != eb.length || rd.length != ed.length) {
      return false;
    }

    rb.sort(function(a, b) {
      return a - b;
    });
    rd.sort(function(a, b) {
      return a - b;
    });

    for (var i = 0, n = rb.length; i < n; i++) {
      if (rb[i] != eb[i]) {
        return false;
      }
    }
    for (var i = 0, n = rd.length; i < n; i++) {
      if (rd[i] != ed[i]) {
        return false;
      }
    }
    return true;
  },

  _hasExpectedState: function(model, result) {
    if (model.size() != result.length) {
      return false;
    }

    for (var i = 0, n = result.length; i < n; i++) {
      if (model.get(i) != result[i]) {
        return false;
      }
    }

    return true;
  },

  runTests: function(files) {
    var passed = true;
    files.forEach(function(file) {
      process.stdout.write(ljust(path.basename(file) + ':', 20));
      var test = Runner._toTest(fs.readFileSync(file).toString('ascii')),
          model = new life.Model(test.cols, test.rows),
          prev = test.init;
  
      model.init(test.init);

      for (var i = 0, n = test.gens.length; i < n ; i++) {
        var expected_state = test.gens[i],
            expected_changes = Runner._expectedChanges(expected_state, prev),
            changes = model.next();

        if (!Runner._hasExpectedChanges(changes, expected_changes)) {
          passed = false;
          process.stdout.write('FAIL (gen: ' + (i+1) + ')\n');
          Runner._reportChangeProblem(changes, expected_changes);
          return;
        }

        if (!Runner._hasExpectedState(model, expected_state)) {
          passed = false;
          process.stdout.write('FAIL (gen: ' + (i+1) + ')\n');
          Runner._reportStateProblem(model, expected, i + 1);
          return;
        }

        prev = expected_state;
      }

      process.stdout.write('ok\n');
    });
    return passed;
  }
};

compile(['lib/life.ts'], function() {
  var files = fs.readdirSync(path.join(top, 'tests')).map(function(file) {
    return path.join(top, 'tests', file);
  });

  if (!Runner.runTests(files)) {
    process.exit(1);
  }
});
